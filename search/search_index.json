{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"lab-etl","text":"<p>This repository contains the codebase for the ETL scripts for loading laboratory instrument data files into our database. In particular, data files from a variety of formats are converted to Apache Parquet files which provides a standardized interface for access and enforces schema. Of notable importance is the inclusion of metadata in these files. Metadata is extracted from the original test files and stored as JSON-like metadata within the Parquet files in either file-wide or column-specific, as appropriate. Depending on the type of file (from which type of instrument) the keys will be standardized for common fields. Additional metadata that may be instrument-specific will be stored as additional metadata but is not guaranteed to be standardized in any meaningful way. However, the names of these fields may be slightly altered to provide clarity to the user as to what they might represent.</p> <p>Development currently focuses on files and instruments of interest to FSRI's Materials Properties Laboratory but as we integrate with external stakeholders, or have the time, additional instruments and filetypes will be added. Feel free to reach out if you have a particular need for some capability or submit a PR.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>License</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install lab-etl\n</code></pre>"},{"location":"#license","title":"License","text":"<p><code>lab-etl</code> is distributed under the terms of the MIT license.</p>"},{"location":"cone/","title":"Cone File Schema","text":"<p>This documentation provides an overview of the schema used in cone calorimeter files. There exists a variety of manufacturers but the one we have and are most familiar with is made by Deatak. It is know that other manufacturers output file formats differ and will be the subject of future work on this project.</p>"},{"location":"cone/#file-structure","title":"File Structure","text":"<p>The output of the cone calorimeter programs is and excel ('.XLSM') file with two sheets. The first sheet contains the metadata for the test and is denoted 'Scalar Data'. The second sheet contains the actual test data in a typical tabular format with the name 'Scan Data'.</p>"},{"location":"cone/#header","title":"Header","text":"<p>The metadata sheet contains information about the test, such as the laboratory, sample mass, operator, etc. This is the information which is contained in the file-wide metadata associated with the output Parquet files.</p>"},{"location":"cone/#data","title":"Data","text":"<p>The data sheet contains the tabular data format. Column names are given on the first row and the next three rows give information about the acquisition parameters. These are dropped from the output as they do not contain useful information. The 4th row contains the units for their respective columns. The baseline row gives information about the state of the values before the test begins and is extracted and given a null time in the output Parquet file. The remainder of the rows contains the actual data and is extracted and stored as-is. Most of the data types are floats except for the 'Start Test' and 'Flame Verif.' indicators which contain a simple binary digit.</p> <p>The 'Ext Coeff' column is dropped from the data as it is a derived quantity from the 'Smoke Comp' and 'Smoke Meas' columns.</p>"},{"location":"ftir/","title":"FTIR File Schema","text":"<p>This documentation provides an overview of the schema used in FTIR files. At the moment, this documentation is limited to only Bruker instruments as that as what we have experience with. Accordingly, all of the ingest processes rely on being able to read the binary instrument files directly as that allows us to capture all of the metadata as compared to some exported type. As such, the ingest uses the 'brukeropus' package developed by joshduran which handles much of the heavy-lifting.</p>"},{"location":"ftir/#file-structure","title":"File Structure","text":"<p>The file structure of the Bruker FTIR files contains metadata that can be accessed as 'parameters' and 'reference parameters'. These are extracted and stored as-is in the file metadata of the Parquet file.</p>"},{"location":"ftir/#data","title":"Data","text":"<p>Multiple sets of data can be contained in the Bruker file, for instance, 'Reflectance', 'Sample Spectrum', and 'Reference Spectrum', that represent the different parts of the measurement that make up a test. We consider there to be three primary quantities that are of most interest to us: 'Reflectance', 'Transmittance', and 'Absorbance'. Consequently we treat these as the main content of the output Parquet file. However, we also try to extract the remaining spectrum when appropriate. Given that each spectrum has its own set of 'x-values' associated with it, we must interpolate the other spectrum to that of the primary quantity. This does result in some modification and loss of data, however, we view this as an acceptable tradeoff to including more information in the Parquet file. The existing files still exist should we want to go back and look at the originals. All of the primary signals, and consequently the interpolated ones, are given on the basis of wavelength, as that is the primary quantity on which we work in our laboratory but the conversion to wavenumber or frequency is trivial.</p> <p>The datetime of the measurement is taken from the datetime of one of the primary spectrums. The other spectrums have different datetimes as they are conducted at slightly differing moments, however these are dropped from the resulting Parquet file as they are thought to be of limited utility.</p>"},{"location":"ftir/#brukeropus-package","title":"Brukeropus package","text":"<p>Below is just some sample code and explanations for reference and use of the brukeropus package. Deference should be given to the actual documentation, but this gives some common commands that may be useful.</p> <pre><code>    opus_file = read_opus(path)  # Returns an OPUSFile class\n    opus_file.print_parameters()  # Pretty prints all metadata in the file to the console\n    print(opus_file.data_keys)  # Returns a list of all data keys in the file\n\n    # General parameter metadata\n    dict(opus_file.params)\n\n    # Reference parameter metadata\n    dict(opus_file.rf_params)\n\n    # Data\n    opus_file.all_data_keys # Returns a list of all data keys in the file: ['rf', 'r', 'sm']\n    opus_file.r.label # Returns the label of the reflectance spectrum\n    opus_file.r.x # Returns the x-axis data for the reflectance spectrum, in whatever units it was saved in, can be queried with opus_file.r.dxu\n    opus_file.r.wl # Returns the x-axis data for the reflectance spectrum as wavelength (um)\n    opus_file.r.y # Returns the y-axis data for the reflectance spectrum\n    opus_file.r.datetime # Returns the date and time of the measurement\n\n    opus_file.iter_all_data() # Returns a generator that yields all data in the file, i.e. iterates through all data keys\n\n    sm: Single-channel sample spectra\n    rf: Single-channel reference spectra\n    igsm: Sample interferogram\n    igrf: Reference interferogram\n    phsm: Sample phase\n    phrf: Reference phase\n    a: Absorbance\n    t: Transmittance\n    r: Reflectance\n    km: Kubelka-Munk\n    tr: Trace (Intensity over Time)\n    gcig: gc File (Series of Interferograms)\n    gcsc: gc File (Series of Spectra)\n    ra: Raman\n    e: Emission\n    pw: Power\n    logr: log(Reflectance)\n    atr: ATR\n    pas: Photoacoustic\n\n    Conversions between parameter names can be found in\n    from brukeropus.file.constants import PARAM_LABELS\n</code></pre>"},{"location":"hfm/","title":"HFM File Schema","text":"<p>This documentation provides an overview of the schema used in heat flow meter files. There exists a variety of manufacturers but the one we have and are most familiar with is made by Waters/TA.</p>"},{"location":"hfm/#file-structure","title":"File Structure","text":"<p>The output of the heat flow meter programs is and text ('.txt') file. This is possibly the nastiest file we have to deal with and resembles a word document rather than any standardized instrument output. The is a large section of metadata at the top and then also interspersed throughout. It is also questionable whether this should actually be stored in a Parquet file because it is literally like a 5x3 table but we are doing it to maintain consistency. We could move it to a JSON in the future if we wish.</p> <p>The way that we extract data and metadata from these files right down is extremely manually. We pretty much have to check every line and the text in it to determine what it is. I've developed better solution in the past for a small subset of data with complex regex but it is a pain to read and edit and hard to expand. As such, this is the solution at the moment but I would love a better one.</p>"},{"location":"mcc/","title":"MCC File Schema","text":"<p>This documentation provides an overview of the schema used in MCC files. Given that the MCC is still a fairly niche instrument and all based around the hardware and software developed at FAA by Rich Walters, the format is fairly standard. However, we only have a small sample size and it is possible that different manufacturers have tweaked the output format or developed their own software.</p>"},{"location":"mcc/#file-structure","title":"File Structure","text":"<p>The output of the MCC programs we are aware of is in a '.txt' file with the data being tab-delimited. There are two main sections of the data file, the header at the top containing the metadata, and the data columns below.</p>"},{"location":"mcc/#header","title":"Header","text":"<p>The header section contains metadata about the file, such as the sample ID, sample mass, combustor temperature, etc. This is the information which is contained in the file-wide metadata associated with the output Parquet files.</p>"},{"location":"mcc/#faa-header","title":"FAA Header","text":"<p>Here are the thought to be standard metadata fields in the header of files generated by MCC's based on the original FAA design:</p> Original Name Metadata Name Description Example Output Example Sample ID sample_id Provides the file name and location of itself. \"C:\\MCC\\MCC Cal\\Test\\Hemp_Sheets_MCC_30K_min_220112_R1.txt\" {\"sample_id\": \"C:\\MCC\\MCC Cal\\Test\\Hemp_Sheets_MCC_30K_min_220112_R1.txt\"} Sample Weight (mg) sample_mass Gives the user-input sample mass. \"4.64\" {\"sample_mass\": {\"value\":4.64, \"unit\": \"mg\"}} Heating Rate (C/s) heating_rate Gives the heating rate at which the test was performed. \"0.5\" {\"heating_rate\": {\"value\" : 0.5, \"unit\" : \"\u00b0C/s\"}} Combustor Temp (C) combustor_temperature Gives the constant temperature of the combustor during the test. \"900\" {\"combustor_temperature\": {\"value\":900, \"unit\":\"\u00b0C\"}} N2 Flow Rate (cc/min) n2_flow_rate Gives the flow of nitrogen during the test. \"80\" {\"n2_flow_rate\": {\"value\":80, \"unit\":\"ml/min\"}} O2 Flow Rate (cc/min) o2_flow_rate Gives the flow of oxygen during the test. \"20\" {\"o2_flow_rate\": {\"value\":20, \"unit\":\"ml/min\"}} Calibration File temperature_calibration Gives the file containing the calibration information for the device. \"C:\\MCC\\MCC Cal\\Coeff1 JN10440_30_210304.txt.txt\" {\"temperature_calibration\" : {\"file\" : \"C:\\MCC\\MCC Cal\\Coeff1 JN10440_30_210304.txt.txt\"}} T Correction Coefficients temperature_calibration Gives the temperature correction coefficients from the calibration file. \"0   1.024463    0\" {\"temperature_calibration\" : {\"coefficients\" : [0, 1.024463, 0]}} Time Shift (s) time_shift Specifies the time offset applied to the oxygen concentration to account for transport time. \"14\" {\"time_shift\": {\"value\":14, \"unit\":\"s\"}}"},{"location":"mcc/#data","title":"Data","text":"<p>The data section contains the actual data in the form of rows and columns. The data is typically organized in a tabular format, with each column separated by a delimiter. This data is thought to be relatively consistent and contains columns such as 'Time', 'Temperature', 'Oxygen', etc. Column names might be slightly adjusted here to maintain conformity with other instruments or to make them easier to interpret. Units are included in parenthesis after the column name. This information is extracted and stored in the column-based metadata in the output Parquet file.</p>"},{"location":"mcc/#data-schema-definition","title":"Data Schema Definition","text":"<p>The data schema of the MCC file is defined by the columns present in the data section. Each column has a name and a data type associated with it. The data types are primarily 'floats' which represent some measured quantity.</p> <p>The schema definition should include the name and data type of each column, as well as any units that may be present in the parent file.</p>"},{"location":"mcc/#example-data-schema","title":"Example Data Schema","text":"<p>Here is an example data schema for a basic MCC file:</p> Column Name Data Type Units Time Float 's' Temperature Float 'C' N2 flow rate Float 'cc/min' O2 flow rate Float 'cc/min' Flow Rate Float 'cc/min' Oxygen Float '%' HRR Float 'W/g' Heating rate Float 'C/s'"},{"location":"sta/","title":"STA File Schema","text":"<p>This documentation provides an overview of the schema used in STA files. Different manufacturers have slightly different formats with many similarities. Here, we will describe the data format used by many manufacturers, and how we integrate that into a unified schema that is produced in the output Parquet file.</p>"},{"location":"sta/#file-structure","title":"File Structure","text":"<p>Many, if not all, manufacturers collect data in proprietary file formats which cannot be easily accessed by external programs. Fortunately, or perhaps necessarily, manufacturers provide output from their proprietary programs into a more user-friendly format. These are often text-based files in the format of '.txt' or '.csv' that contain columns delimited by some character.</p> <p>The files generally consists of two main sections: the header and the data.</p>"},{"location":"sta/#header","title":"Header","text":"<p>The header section contains metadata about the file, such as the date performed, sample information, calibration information, etc. This is the primary section acted on by these scripts because they are frequently slightly different between manufacturers and contain different amounts and types of information. In many cases these differing field names correspond to the same information and it is the purpose of these scripts to, when possible, consolidate these fields under one title. This is the information which is contained in the file-wide metadata associated with the output Parquet files.</p>"},{"location":"sta/#netzsch-header","title":"Netzsch Header","text":"<p>Here are the commonly found metadata fields in the Netzsch instrument file header:</p> Original Name Metadata Name Description Example Output Example EXPORTTYPE export_type Provides the type of export that was performed from the Netzsch Proteus software. \"DATA ALL\" {\"export_type\": \"DATA ALL\"} FILE file Lists the manufacturer data file from which this file was produced. \"DF_FILED_DES_STA_N2_10K_231028_R1.ngb-ss3\" {\"file\": \"DF_FILED_DES_STA_N2_10K_231028_R1.ngb-ss3\"} FORMAT format Provides the export format of the file. \"NETZSCH5\" {\"format\": \"NETZSCH5\"} FTYPE file_type Provides the encoding type of the file. \"ANSI\" {\"file_type\": \"ANSI\"} IDENTITY identity Provides a user-entered quantity during test setup. \"DF_FILED\" {\"identity\": \"DF_FILED\"} DECIMAL decimal Provides the decimal character. \"POINT\" {\"decimal\": \"POINT\"} SEPARATOR delimiter Provides the delimiter used in the file. \"COMMA\" {\"delimiter\": \"COMMA\"} MTYPE measurement_type Provides the measurement type exported. \"DSC\" {\"measurement_type\": \"DSC\"} INSTRUMENT instrument Specifies the name or model of the instrument used for the measurement. \"NETZSCH STA 449F3\" {\"instrument\": \"NETZSCH STA 449F3\"} PROJECT project Provides user-input information about the project or experiment associated with the data. \"Oxidative Pyrolysis\" {\"project\": \"Oxidative Pyrolysis\"} DATE/TIME date_performed Indicates the date and time when the measurement was performed. \"2/11/2024 13:12:51 (UTC-5)\" {\"date_performed\": \"2023-10-28T13:29:27+04:00\"} CORR. FILE correction_file Refers to the correction file used during the measurement, if any. {\"correction_file\": \"\"} TEMPCAL temperature_calibration Provides the temperature calibration file used for the measurement. \"30-01-2024 15:52\" {\"temperature_calibration\": {'date': '2023-09-10T07:44:00'}} SENSITIVITY sensitivity_calibration Provides the sensitivity calibration file used for the measurement. \"30-01-2024 15:52\" {\"sensitivity_calibration\": {'date': '2023-09-10T07:44:00'}} LABORATORY laboratory Indicates the laboratory or facility where the measurement took place. \"UL FSRI\" {\"laboratory\": \"UL FSRI\"} OPERATOR operator Specifies the user-input name or identifier of the operator who performed the measurement. \"Grayson\" {\"operator\": \"Grayson\"} REMARK comments Provides any additional remarks or comments related to the measurement. \"Douglas fir, Filed, Closed pan, Pt, Kinetics validation run\" {\"comments\": \"Douglas fir, Filed, Closed pan, Pt, Kinetics validation run\"} SAMPLE sample User-input name of the sample being tested. \"DF_FILED\" {\"sample\": \"DF_FILED\"} SAMPLE MASS /mg sample_mass Specifies the user-input mass of the sample. \"3.99\" {\"sample_mass\": {'value': 3.99, 'unit': 'mg'}} MATERIAL material Indicates the user-input material of the sample. \"Douglas Fir\" {\"material\": \"Douglas Fir\"} REFERENCE reference Refers to a user-input reference material used for comparison or calibration. Often None. {\"reference\": \"\"} REFERENCE MASS /mg reference_mass Specifies the user-input mass of the reference material. Often 0. \"0\" {\"reference_mass\": {'value': 0, 'unit': 'mg'}} TYPE OF CRUCIBLE crucible_type Describes the user-input type or material of the crucible used. Includes volume and presence of a lid. \"PtRh20 85 \u00b5l, with lid\" {\"crucible_type\": {'material': 'PtRh20', 'volume': {'value': 85.0, 'unit': '\u00b5l'}, 'extra': 'with lid'}} SAMPLE CRUCIBLE MASS sample_crucible_mass Specifies the user-input mass of the crucible containing the sample. \"254.00\" {\"sample_crucible_mass\": {'value': 241.78, 'unit': 'mg'}} REFERENCE CRUCIBLE MASS reference_crucible_mass Specifies the user-input mass of the crucible containing the reference material. \"254.04\" {\"reference_crucible_mass\": {'value': 254.00, 'unit': 'mg'}} PURGE {X} MFC purge_{x}_mfc Provides information about the one of the purge gas mass flow controller. \"NITROGEN,250.0 ml/min\" {\"purge_{x}_mfc\": {'gas': 'NITROGEN', 'range': 250.0, 'unit': 'ml/min'}} PROTECTIVE MFC protective_mfc Provides information about the protective gas mass flow controller. \"NITROGEN,250.0 ml/min\" {\"protective_mfc\": {'gas': 'NITROGEN', 'range': 250.0, 'unit': 'ml/min'}} DSC RANGE /\u00b5V dsc_range Describes the range of the differential scanning calorimetry (DSC) measurement. \"5000\" {\"dsc_range\": {'value': 5000, 'unit': '\u00b5V'}} TG RANGE /mg tg_range Specifies the range of the thermogravimetric analysis (TG) measurement. \"35000\" {\"tg_range\": {'value': 35000, 'unit': 'mg'}} TAU-R tau_r Indicates if Tau-R mode was used during the measurement. \"---\" {\"tau_r\": \"---\"} CORR. CODE correction_code Not really sure what this represents at the moment. For all of our files it is \"000\". \"000\" {\"correction_code\": \"000\"} EXO exothermic Negative or positive 1 value that represents the direction corresponding to exothermic DSC phenomena. \"-1\" {\"exothermic\": \"-1\"} RANGE range Describes the range of temperatures and/or heating rates during this measurement. \"25\u00b0C....700\u00b0C/0.0....40.0K/min\" {\"range\": \"25\u00b0C....700\u00b0C/0.0....40.0K/min\"} SEGMENT segment Specifies the segment number(s) presented and the total number of segments in the temperature program. \"S1-9/9\" {\"segment\": \"S1-9/9\"} SEG. segment_{x} Additional segment information including start and end temperatures and time or heating rate between them. \"25\u00b0C/20.0(K/min)/250\u00b0C\" {\"segment_{x}\": {'start_temperature': {'value': 25.0, 'unit': '\u00b0C'}, 'end_temperature': {'value': 250.0, 'unit': '\u00b0C'}, 'heating_rate': {'value': 20.0, 'unit': 'K/min'}}}"},{"location":"sta/#data","title":"Data","text":"<p>The data section contains the actual data in the form of rows and columns. The data is typically organized in a tabular format, with each column separated by a delimiter. This data is generally similar between manufacturers and contains columns such as 'Temperature', 'Time', 'Mass', etc. Slightly different column names (for instance, 'Temp.' vs ''Temperature') are resolved with mappings to a common format. Units are often included in either the column names or the above described header. This information is extracted and stored in the column-based metadata in the output Parquet file.</p>"},{"location":"sta/#data-schema-definition","title":"Data Schema Definition","text":"<p>The data schema of the STA file is defined by the columns present in the data section. Each column has a name and a data type associated with it. The data types are primarily 'floats' which represent some measured quantity but can occasionally be 'ints' (for example, when logging the current segment number).</p> <p>The schema definition should include the name and data type of each column, as well as any units that may be present in the parent file.</p>"},{"location":"sta/#example-data-schema","title":"Example Data Schema","text":"<p>Here is an example data schema for a basic STA file:</p> Column Name Data Type Units Temperature Float '\u00b0C' Time Float 'min' Mass Float 'mg' DSC Float 'mW' Segment Int null"}]}